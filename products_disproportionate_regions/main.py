import csv
import mysql.connector
import pandas as pd
import json


PDR = '/Users/gracezhou/Documents/DataOps/Products_by_Region.csv'
product_ids = []
with open(PDR, "rU") as f:
    reader = csv.reader(f)
    headers = reader.next()
    for row in reader:
        product_ids.append(row[0])

region_list = headers[1:]
# print region_list
# print product_ids
db = mysql.connector.connect(db='matcher', host='db-master', user='grace_5weW', passwd='NvmxmEL6YAyYse1k67Un')
c = db.cursor(buffered=True)

c.execute("""SET @@group_concat_max_len = 6400000;""")

query = ("""select product_id, country, count(*)
from matcher.url_mrf_location_hits
where country is not null and product_id IN {}
group by product_id, country;  # anomalies at country level""")
query = query.format(tuple(product_ids))
iterable = c.execute(query, multi=True)
data = {}

for item in iterable:
    try:
        for result in item.fetchall():  # fetch (and discard) remaining rows
            # print result
            product_id = result[0]
            region_code = result[1]
            counts = result[2]
            if product_id not in data:
                data[product_id] = {}
                for i in range(len(region_list)):
                    data[product_id][region_list[i]] = 0
            data[product_id][region_code] = counts
    except mysql.connector.errors.InterfaceError as ie:
        if ie.msg == 'No result set to fetch from.':
            # no problem, we were just at the end of the result set
            pass
        else:
            raise

keys = data.keys()
# print data[19]['FR']
# filename = '/Users/gracezhou/Documents/DataOps/regional_anomalies.csv'
# fw = open(filename, 'w')
# fw.write("product_id, US, CL, UA, LK, TZ, JE, PG, CD, GI, GA, MW, MV, XK, DJ, SL, MS, AI, BS, MG, GL, TT, TJ, GG, FO, SS, MR, CF, LS, BQ, BV, FM, GQ, SX, PM, NA, FK, SJ, SB, TG, PW, MF, PN, DM, NF, TK, WF, EH, SC, KI, TF, PR, VI, GU, AS, MP, TV, CK, SD, VA, GS, NR, TC, VG, KP, AQ, BT, YT, HM, TM, NU, IO, SR, MQ, LC, CC, CX, AX, TL, RW, TO, VC, BW, AW, CV, GY, WS, BI, LY, SZ, SY, NE, ME, SH, GW, VU, KN, CS, PF, DZ, BN, SM, ER, FJ, AG, GF, CG, HT, BZ, GP, UZ, BL, GD, KM, AD, PS, BB, CW, CI, SO, BJ, BM, MN, RE, CM, GN, LI, MC, NI, MH, HN, CU, IM, MM, BH, MK, ZW, LA, ZM, LR, AO, PY, ML, KG, MZ, BF, SN, JO, EC, AZ, TD, BY, SV, AM, MD, AL, MO, LT, LV, SI, UG, KZ, IS, MU, JM, NC, IQ, ST, GT, EE, DO, OM, CY, YE, BA, KH, DK, KW, HR, LB, NP, BO, PE, RS, LU, MT, CR, GE, PA, AF, UY, SK, TN, GM, PK, GH, NO, MA, QA, SA, CO, GR, ET, EG, BG, IR, FI, KR, KE, BD, HU, NG, VN, NZ, TW, TH, PT, VE, KY, AT, JP, ID, RO, MY, IL, HK, AE, CN, CZ, CH, PH, SE, ZA, ES, BR, IE, PL, AR, SG, RU, TR, IT, NL, MX, AU, GB, IN, BE, CA, DE, FR\n")
# for i in range(len(keys)):
#     fw.write('{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}\n'.format(keys[i], data[keys[i]]['US'], data[keys[i]]['CL'], data[keys[i]]['UA'], data[keys[i]]['LK'], data[keys[i]]['TZ'], data[keys[i]]['JE'], data[keys[i]]['PG'], data[keys[i]]['CD'], data[keys[i]]['GI'], data[keys[i]]['GA'], data[keys[i]]['MW'], data[keys[i]]['MV'], data[keys[i]]['XK'], data[keys[i]]['DJ'], data[keys[i]]['SL'], data[keys[i]]['MS'], data[keys[i]]['AI'], data[keys[i]]['BS'], data[keys[i]]['MG'], data[keys[i]]['GL'], data[keys[i]]['TT'], data[keys[i]]['TJ'], data[keys[i]]['GG'], data[keys[i]]['FO'], data[keys[i]]['SS'], data[keys[i]]['MR'], data[keys[i]]['CF'], data[keys[i]]['LS'], data[keys[i]]['BQ'], data[keys[i]]['BV'], data[keys[i]]['FM'], data[keys[i]]['GQ'], data[keys[i]]['SX'], data[keys[i]]['PM'], data[keys[i]]['NA'], data[keys[i]]['FK'], data[keys[i]]['SJ'], data[keys[i]]['SB'], data[keys[i]]['TG'], data[keys[i]]['PW'], data[keys[i]]['MF'], data[keys[i]]['PN'], data[keys[i]]['DM'], data[keys[i]]['NF'], data[keys[i]]['TK'], data[keys[i]]['WF'], data[keys[i]]['EH'], data[keys[i]]['SC'], data[keys[i]]['KI'], data[keys[i]]['TF'], data[keys[i]]['PR'], data[keys[i]]['VI'], data[keys[i]]['GU'], data[keys[i]]['AS'], data[keys[i]]['MP'], data[keys[i]]['TV'], data[keys[i]]['CK'], data[keys[i]]['SD'], data[keys[i]]['VA'], data[keys[i]]['GS'], data[keys[i]]['NR'], data[keys[i]]['TC'], data[keys[i]]['VG'], data[keys[i]]['KP'], data[keys[i]]['AQ'], data[keys[i]]['BT'], data[keys[i]]['YT'], data[keys[i]]['HM'], data[keys[i]]['TM'], data[keys[i]]['NU'], data[keys[i]]['IO'], data[keys[i]]['SR'], data[keys[i]]['MQ'], data[keys[i]]['LC'], data[keys[i]]['CC'], data[keys[i]]['CX'], data[keys[i]]['AX'], data[keys[i]]['TL'], data[keys[i]]['RW'], data[keys[i]]['TO'], data[keys[i]]['VC'], data[keys[i]]['BW'], data[keys[i]]['AW'], data[keys[i]]['CV'], data[keys[i]]['GY'], data[keys[i]]['WS'], data[keys[i]]['BI'], data[keys[i]]['LY'], data[keys[i]]['SZ'], data[keys[i]]['SY'], data[keys[i]]['NE'], data[keys[i]]['ME'], data[keys[i]]['SH'], data[keys[i]]['GW'], data[keys[i]]['VU'], data[keys[i]]['KN'], data[keys[i]]['CS'], data[keys[i]]['PF'], data[keys[i]]['DZ'], data[keys[i]]['BN'], data[keys[i]]['SM'], data[keys[i]]['ER'], data[keys[i]]['FJ'], data[keys[i]]['AG'], data[keys[i]]['GF'], data[keys[i]]['CG'], data[keys[i]]['HT'], data[keys[i]]['BZ'], data[keys[i]]['GP'], data[keys[i]]['UZ'], data[keys[i]]['BL'], data[keys[i]]['GD'], data[keys[i]]['KM'], data[keys[i]]['AD'], data[keys[i]]['PS'], data[keys[i]]['BB'], data[keys[i]]['CW'], data[keys[i]]['CI'], data[keys[i]]['SO'], data[keys[i]]['BJ'], data[keys[i]]['BM'], data[keys[i]]['MN'], data[keys[i]]['RE'], data[keys[i]]['CM'], data[keys[i]]['GN'], data[keys[i]]['LI'], data[keys[i]]['MC'], data[keys[i]]['NI'], data[keys[i]]['MH'], data[keys[i]]['HN'], data[keys[i]]['CU'], data[keys[i]]['IM'], data[keys[i]]['MM'], data[keys[i]]['BH'], data[keys[i]]['MK'], data[keys[i]]['ZW'], data[keys[i]]['LA'], data[keys[i]]['ZM'], data[keys[i]]['LR'], data[keys[i]]['AO'], data[keys[i]]['PY'], data[keys[i]]['ML'], data[keys[i]]['KG'], data[keys[i]]['MZ'], data[keys[i]]['BF'], data[keys[i]]['SN'], data[keys[i]]['JO'], data[keys[i]]['EC'], data[keys[i]]['AZ'], data[keys[i]]['TD'], data[keys[i]]['BY'], data[keys[i]]['SV'], data[keys[i]]['AM'], data[keys[i]]['MD'], data[keys[i]]['AL'], data[keys[i]]['MO'], data[keys[i]]['LT'], data[keys[i]]['LV'], data[keys[i]]['SI'], data[keys[i]]['UG'], data[keys[i]]['KZ'], data[keys[i]]['IS'], data[keys[i]]['MU'], data[keys[i]]['JM'], data[keys[i]]['NC'], data[keys[i]]['IQ'], data[keys[i]]['ST'], data[keys[i]]['GT'], data[keys[i]]['EE'], data[keys[i]]['DO'], data[keys[i]]['OM'], data[keys[i]]['CY'], data[keys[i]]['YE'], data[keys[i]]['BA'], data[keys[i]]['KH'], data[keys[i]]['DK'], data[keys[i]]['KW'], data[keys[i]]['HR'], data[keys[i]]['LB'], data[keys[i]]['NP'], data[keys[i]]['BO'], data[keys[i]]['PE'], data[keys[i]]['RS'], data[keys[i]]['LU'], data[keys[i]]['MT'], data[keys[i]]['CR'], data[keys[i]]['GE'], data[keys[i]]['PA'], data[keys[i]]['AF'], data[keys[i]]['UY'], data[keys[i]]['SK'], data[keys[i]]['TN'], data[keys[i]]['GM'], data[keys[i]]['PK'], data[keys[i]]['GH'], data[keys[i]]['NO'], data[keys[i]]['MA'], data[keys[i]]['QA'], data[keys[i]]['SA'], data[keys[i]]['CO'], data[keys[i]]['GR'], data[keys[i]]['ET'], data[keys[i]]['EG'], data[keys[i]]['BG'], data[keys[i]]['IR'], data[keys[i]]['FI'], data[keys[i]]['KR'], data[keys[i]]['KE'], data[keys[i]]['BD'], data[keys[i]]['HU'], data[keys[i]]['NG'], data[keys[i]]['VN'], data[keys[i]]['NZ'], data[keys[i]]['TW'], data[keys[i]]['TH'], data[keys[i]]['PT'], data[keys[i]]['VE'], data[keys[i]]['KY'], data[keys[i]]['AT'], data[keys[i]]['JP'], data[keys[i]]['ID'], data[keys[i]]['RO'], data[keys[i]]['MY'], data[keys[i]]['IL'], data[keys[i]]['HK'], data[keys[i]]['AE'], data[keys[i]]['CN'], data[keys[i]]['CZ'], data[keys[i]]['CH'], data[keys[i]]['PH'], data[keys[i]]['SE'], data[keys[i]]['ZA'], data[keys[i]]['ES'], data[keys[i]]['BR'], data[keys[i]]['IE'], data[keys[i]]['PL'], data[keys[i]]['AR'], data[keys[i]]['SG'], data[keys[i]]['RU'], data[keys[i]]['TR'], data[keys[i]]['IT'], data[keys[i]]['NL'], data[keys[i]]['MX'], data[keys[i]]['AU'], data[keys[i]]['GB'], data[keys[i]]['IN'], data[keys[i]]['BE'], data[keys[i]]['CA'], data[keys[i]]['DE'], data[keys[i]]['FR']))
# fw.close()
# #

all_data = []
prod_wo_hits_in_us = []
for i in range(len(keys)):
    if data[keys[i]]['US'] != 0:
        # prod_ids.append(keys[i])
        ls = [keys[i], float(data[keys[i]]['US'])/data[keys[i]]['US'], float(data[keys[i]]['CL'])/data[keys[i]]['US'], float(data[keys[i]]['UA'])/data[keys[i]]['US'], float(data[keys[i]]['LK'])/data[keys[i]]['US'], float(data[keys[i]]['TZ'])/data[keys[i]]['US'], float(data[keys[i]]['JE'])/data[keys[i]]['US'], float(data[keys[i]]['PG'])/data[keys[i]]['US'], float(data[keys[i]]['CD'])/data[keys[i]]['US'], float(data[keys[i]]['GI'])/data[keys[i]]['US'], float(data[keys[i]]['GA'])/data[keys[i]]['US'], float(data[keys[i]]['MW'])/data[keys[i]]['US'], float(data[keys[i]]['MV'])/data[keys[i]]['US'], float(data[keys[i]]['XK'])/data[keys[i]]['US'], float(data[keys[i]]['DJ'])/data[keys[i]]['US'], float(data[keys[i]]['SL'])/data[keys[i]]['US'], float(data[keys[i]]['MS'])/data[keys[i]]['US'], float(data[keys[i]]['AI'])/data[keys[i]]['US'], float(data[keys[i]]['BS'])/data[keys[i]]['US'], float(data[keys[i]]['MG'])/data[keys[i]]['US'], float(data[keys[i]]['GL'])/data[keys[i]]['US'], float(data[keys[i]]['TT'])/data[keys[i]]['US'], float(data[keys[i]]['TJ'])/data[keys[i]]['US'], float(data[keys[i]]['GG'])/data[keys[i]]['US'], float(data[keys[i]]['FO'])/data[keys[i]]['US'], float(data[keys[i]]['SS'])/data[keys[i]]['US'], float(data[keys[i]]['MR'])/data[keys[i]]['US'], float(data[keys[i]]['CF'])/data[keys[i]]['US'], float(data[keys[i]]['LS'])/data[keys[i]]['US'], float(data[keys[i]]['BQ'])/data[keys[i]]['US'], float(data[keys[i]]['BV'])/data[keys[i]]['US'], float(data[keys[i]]['FM'])/data[keys[i]]['US'], float(data[keys[i]]['GQ'])/data[keys[i]]['US'], float(data[keys[i]]['SX'])/data[keys[i]]['US'], float(data[keys[i]]['PM'])/data[keys[i]]['US'], float(data[keys[i]]['NA'])/data[keys[i]]['US'], float(data[keys[i]]['FK'])/data[keys[i]]['US'], float(data[keys[i]]['SJ'])/data[keys[i]]['US'], float(data[keys[i]]['SB'])/data[keys[i]]['US'], float(data[keys[i]]['TG'])/data[keys[i]]['US'], float(data[keys[i]]['PW'])/data[keys[i]]['US'], float(data[keys[i]]['MF'])/data[keys[i]]['US'], float(data[keys[i]]['PN'])/data[keys[i]]['US'], float(data[keys[i]]['DM'])/data[keys[i]]['US'], float(data[keys[i]]['NF'])/data[keys[i]]['US'], float(data[keys[i]]['TK'])/data[keys[i]]['US'], float(data[keys[i]]['WF'])/data[keys[i]]['US'], float(data[keys[i]]['EH'])/data[keys[i]]['US'], float(data[keys[i]]['SC'])/data[keys[i]]['US'], float(data[keys[i]]['KI'])/data[keys[i]]['US'], float(data[keys[i]]['TF'])/data[keys[i]]['US'], float(data[keys[i]]['PR'])/data[keys[i]]['US'], float(data[keys[i]]['VI'])/data[keys[i]]['US'], float(data[keys[i]]['GU'])/data[keys[i]]['US'], float(data[keys[i]]['AS'])/data[keys[i]]['US'], float(data[keys[i]]['MP'])/data[keys[i]]['US'], float(data[keys[i]]['TV'])/data[keys[i]]['US'], float(data[keys[i]]['CK'])/data[keys[i]]['US'], float(data[keys[i]]['SD'])/data[keys[i]]['US'], float(data[keys[i]]['VA'])/data[keys[i]]['US'], float(data[keys[i]]['GS'])/data[keys[i]]['US'], float(data[keys[i]]['NR'])/data[keys[i]]['US'], float(data[keys[i]]['TC'])/data[keys[i]]['US'], float(data[keys[i]]['VG'])/data[keys[i]]['US'], float(data[keys[i]]['KP'])/data[keys[i]]['US'], float(data[keys[i]]['AQ'])/data[keys[i]]['US'], float(data[keys[i]]['BT'])/data[keys[i]]['US'], float(data[keys[i]]['YT'])/data[keys[i]]['US'], float(data[keys[i]]['HM'])/data[keys[i]]['US'], float(data[keys[i]]['TM'])/data[keys[i]]['US'], float(data[keys[i]]['NU'])/data[keys[i]]['US'], float(data[keys[i]]['IO'])/data[keys[i]]['US'], float(data[keys[i]]['SR'])/data[keys[i]]['US'], float(data[keys[i]]['MQ'])/data[keys[i]]['US'], float(data[keys[i]]['LC'])/data[keys[i]]['US'], float(data[keys[i]]['CC'])/data[keys[i]]['US'], float(data[keys[i]]['CX'])/data[keys[i]]['US'], float(data[keys[i]]['AX'])/data[keys[i]]['US'], float(data[keys[i]]['TL'])/data[keys[i]]['US'], float(data[keys[i]]['RW'])/data[keys[i]]['US'], float(data[keys[i]]['TO'])/data[keys[i]]['US'], float(data[keys[i]]['VC'])/data[keys[i]]['US'], float(data[keys[i]]['BW'])/data[keys[i]]['US'], float(data[keys[i]]['AW'])/data[keys[i]]['US'], float(data[keys[i]]['CV'])/data[keys[i]]['US'], float(data[keys[i]]['GY'])/data[keys[i]]['US'], float(data[keys[i]]['WS'])/data[keys[i]]['US'], float(data[keys[i]]['BI'])/data[keys[i]]['US'], float(data[keys[i]]['LY'])/data[keys[i]]['US'], float(data[keys[i]]['SZ'])/data[keys[i]]['US'], float(data[keys[i]]['SY'])/data[keys[i]]['US'], float(data[keys[i]]['NE'])/data[keys[i]]['US'], float(data[keys[i]]['ME'])/data[keys[i]]['US'], float(data[keys[i]]['SH'])/data[keys[i]]['US'], float(data[keys[i]]['GW'])/data[keys[i]]['US'], float(data[keys[i]]['VU'])/data[keys[i]]['US'], float(data[keys[i]]['KN'])/data[keys[i]]['US'], float(data[keys[i]]['CS'])/data[keys[i]]['US'], float(data[keys[i]]['PF'])/data[keys[i]]['US'], float(data[keys[i]]['DZ'])/data[keys[i]]['US'], float(data[keys[i]]['BN'])/data[keys[i]]['US'], float(data[keys[i]]['SM'])/data[keys[i]]['US'], float(data[keys[i]]['ER'])/data[keys[i]]['US'], float(data[keys[i]]['FJ'])/data[keys[i]]['US'], float(data[keys[i]]['AG'])/data[keys[i]]['US'], float(data[keys[i]]['GF'])/data[keys[i]]['US'], float(data[keys[i]]['CG'])/data[keys[i]]['US'], float(data[keys[i]]['HT'])/data[keys[i]]['US'], float(data[keys[i]]['BZ'])/data[keys[i]]['US'], float(data[keys[i]]['GP'])/data[keys[i]]['US'], float(data[keys[i]]['UZ'])/data[keys[i]]['US'], float(data[keys[i]]['BL'])/data[keys[i]]['US'], float(data[keys[i]]['GD'])/data[keys[i]]['US'], float(data[keys[i]]['KM'])/data[keys[i]]['US'], float(data[keys[i]]['AD'])/data[keys[i]]['US'], float(data[keys[i]]['PS'])/data[keys[i]]['US'], float(data[keys[i]]['BB'])/data[keys[i]]['US'], float(data[keys[i]]['CW'])/data[keys[i]]['US'], float(data[keys[i]]['CI'])/data[keys[i]]['US'], float(data[keys[i]]['SO'])/data[keys[i]]['US'], float(data[keys[i]]['BJ'])/data[keys[i]]['US'], float(data[keys[i]]['BM'])/data[keys[i]]['US'], float(data[keys[i]]['MN'])/data[keys[i]]['US'], float(data[keys[i]]['RE'])/data[keys[i]]['US'], float(data[keys[i]]['CM'])/data[keys[i]]['US'], float(data[keys[i]]['GN'])/data[keys[i]]['US'], float(data[keys[i]]['LI'])/data[keys[i]]['US'], float(data[keys[i]]['MC'])/data[keys[i]]['US'], float(data[keys[i]]['NI'])/data[keys[i]]['US'], float(data[keys[i]]['MH'])/data[keys[i]]['US'], float(data[keys[i]]['HN'])/data[keys[i]]['US'], float(data[keys[i]]['CU'])/data[keys[i]]['US'], float(data[keys[i]]['IM'])/data[keys[i]]['US'], float(data[keys[i]]['MM'])/data[keys[i]]['US'], float(data[keys[i]]['BH'])/data[keys[i]]['US'], float(data[keys[i]]['MK'])/data[keys[i]]['US'], float(data[keys[i]]['ZW'])/data[keys[i]]['US'], float(data[keys[i]]['LA'])/data[keys[i]]['US'], float(data[keys[i]]['ZM'])/data[keys[i]]['US'], float(data[keys[i]]['LR'])/data[keys[i]]['US'], float(data[keys[i]]['AO'])/data[keys[i]]['US'], float(data[keys[i]]['PY'])/data[keys[i]]['US'], float(data[keys[i]]['ML'])/data[keys[i]]['US'], float(data[keys[i]]['KG'])/data[keys[i]]['US'], float(data[keys[i]]['MZ'])/data[keys[i]]['US'], float(data[keys[i]]['BF'])/data[keys[i]]['US'], float(data[keys[i]]['SN'])/data[keys[i]]['US'], float(data[keys[i]]['JO'])/data[keys[i]]['US'], float(data[keys[i]]['EC'])/data[keys[i]]['US'], float(data[keys[i]]['AZ'])/data[keys[i]]['US'], float(data[keys[i]]['TD'])/data[keys[i]]['US'], float(data[keys[i]]['BY'])/data[keys[i]]['US'], float(data[keys[i]]['SV'])/data[keys[i]]['US'], float(data[keys[i]]['AM'])/data[keys[i]]['US'], float(data[keys[i]]['MD'])/data[keys[i]]['US'], float(data[keys[i]]['AL'])/data[keys[i]]['US'], float(data[keys[i]]['MO'])/data[keys[i]]['US'], float(data[keys[i]]['LT'])/data[keys[i]]['US'], float(data[keys[i]]['LV'])/data[keys[i]]['US'], float(data[keys[i]]['SI'])/data[keys[i]]['US'], float(data[keys[i]]['UG'])/data[keys[i]]['US'], float(data[keys[i]]['KZ'])/data[keys[i]]['US'], float(data[keys[i]]['IS'])/data[keys[i]]['US'], float(data[keys[i]]['MU'])/data[keys[i]]['US'], float(data[keys[i]]['JM'])/data[keys[i]]['US'], float(data[keys[i]]['NC'])/data[keys[i]]['US'], float(data[keys[i]]['IQ'])/data[keys[i]]['US'], float(data[keys[i]]['ST'])/data[keys[i]]['US'], float(data[keys[i]]['GT'])/data[keys[i]]['US'], float(data[keys[i]]['EE'])/data[keys[i]]['US'], float(data[keys[i]]['DO'])/data[keys[i]]['US'], float(data[keys[i]]['OM'])/data[keys[i]]['US'], float(data[keys[i]]['CY'])/data[keys[i]]['US'], float(data[keys[i]]['YE'])/data[keys[i]]['US'], float(data[keys[i]]['BA'])/data[keys[i]]['US'], float(data[keys[i]]['KH'])/data[keys[i]]['US'], float(data[keys[i]]['DK'])/data[keys[i]]['US'], float(data[keys[i]]['KW'])/data[keys[i]]['US'], float(data[keys[i]]['HR'])/data[keys[i]]['US'], float(data[keys[i]]['LB'])/data[keys[i]]['US'], float(data[keys[i]]['NP'])/data[keys[i]]['US'], float(data[keys[i]]['BO'])/data[keys[i]]['US'], float(data[keys[i]]['PE'])/data[keys[i]]['US'], float(data[keys[i]]['RS'])/data[keys[i]]['US'], float(data[keys[i]]['LU'])/data[keys[i]]['US'], float(data[keys[i]]['MT'])/data[keys[i]]['US'], float(data[keys[i]]['CR'])/data[keys[i]]['US'], float(data[keys[i]]['GE'])/data[keys[i]]['US'], float(data[keys[i]]['PA'])/data[keys[i]]['US'], float(data[keys[i]]['AF'])/data[keys[i]]['US'], float(data[keys[i]]['UY'])/data[keys[i]]['US'], float(data[keys[i]]['SK'])/data[keys[i]]['US'], float(data[keys[i]]['TN'])/data[keys[i]]['US'], float(data[keys[i]]['GM'])/data[keys[i]]['US'], float(data[keys[i]]['PK'])/data[keys[i]]['US'], float(data[keys[i]]['GH'])/data[keys[i]]['US'], float(data[keys[i]]['NO'])/data[keys[i]]['US'], float(data[keys[i]]['MA'])/data[keys[i]]['US'], float(data[keys[i]]['QA'])/data[keys[i]]['US'], float(data[keys[i]]['SA'])/data[keys[i]]['US'], float(data[keys[i]]['CO'])/data[keys[i]]['US'], float(data[keys[i]]['GR'])/data[keys[i]]['US'], float(data[keys[i]]['ET'])/data[keys[i]]['US'], float(data[keys[i]]['EG'])/data[keys[i]]['US'], float(data[keys[i]]['BG'])/data[keys[i]]['US'], float(data[keys[i]]['IR'])/data[keys[i]]['US'], float(data[keys[i]]['FI'])/data[keys[i]]['US'], float(data[keys[i]]['KR'])/data[keys[i]]['US'], float(data[keys[i]]['KE'])/data[keys[i]]['US'], float(data[keys[i]]['BD'])/data[keys[i]]['US'], float(data[keys[i]]['HU'])/data[keys[i]]['US'], float(data[keys[i]]['NG'])/data[keys[i]]['US'], float(data[keys[i]]['VN'])/data[keys[i]]['US'], float(data[keys[i]]['NZ'])/data[keys[i]]['US'], float(data[keys[i]]['TW'])/data[keys[i]]['US'], float(data[keys[i]]['TH'])/data[keys[i]]['US'], float(data[keys[i]]['PT'])/data[keys[i]]['US'], float(data[keys[i]]['VE'])/data[keys[i]]['US'], float(data[keys[i]]['KY'])/data[keys[i]]['US'], float(data[keys[i]]['AT'])/data[keys[i]]['US'], float(data[keys[i]]['JP'])/data[keys[i]]['US'], float(data[keys[i]]['ID'])/data[keys[i]]['US'], float(data[keys[i]]['RO'])/data[keys[i]]['US'], float(data[keys[i]]['MY'])/data[keys[i]]['US'], float(data[keys[i]]['IL'])/data[keys[i]]['US'], float(data[keys[i]]['HK'])/data[keys[i]]['US'], float(data[keys[i]]['AE'])/data[keys[i]]['US'], float(data[keys[i]]['CN'])/data[keys[i]]['US'], float(data[keys[i]]['CZ'])/data[keys[i]]['US'], float(data[keys[i]]['CH'])/data[keys[i]]['US'], float(data[keys[i]]['PH'])/data[keys[i]]['US'], float(data[keys[i]]['SE'])/data[keys[i]]['US'], float(data[keys[i]]['ZA'])/data[keys[i]]['US'], float(data[keys[i]]['ES'])/data[keys[i]]['US'], float(data[keys[i]]['BR'])/data[keys[i]]['US'], float(data[keys[i]]['IE'])/data[keys[i]]['US'], float(data[keys[i]]['PL'])/data[keys[i]]['US'], float(data[keys[i]]['AR'])/data[keys[i]]['US'], float(data[keys[i]]['SG'])/data[keys[i]]['US'], float(data[keys[i]]['RU'])/data[keys[i]]['US'], float(data[keys[i]]['TR'])/data[keys[i]]['US'], float(data[keys[i]]['IT'])/data[keys[i]]['US'], float(data[keys[i]]['NL'])/data[keys[i]]['US'], float(data[keys[i]]['MX'])/data[keys[i]]['US'], float(data[keys[i]]['AU'])/data[keys[i]]['US'], float(data[keys[i]]['GB'])/data[keys[i]]['US'], float(data[keys[i]]['IN'])/data[keys[i]]['US'], float(data[keys[i]]['BE'])/data[keys[i]]['US'], float(data[keys[i]]['CA'])/data[keys[i]]['US'], float(data[keys[i]]['DE'])/data[keys[i]]['US'], float(data[keys[i]]['FR'])/data[keys[i]]['US']]
        # print len(ls)
        # print ls
        # print '++++++++++++++'
        all_data.append(ls)
    else:
        lt = [keys[i], data[keys[i]]['US'], data[keys[i]]['CL'], data[keys[i]]['UA'], data[keys[i]]['LK'], data[keys[i]]['TZ'], data[keys[i]]['JE'], data[keys[i]]['PG'], data[keys[i]]['CD'], data[keys[i]]['GI'], data[keys[i]]['GA'], data[keys[i]]['MW'], data[keys[i]]['MV'], data[keys[i]]['XK'], data[keys[i]]['DJ'], data[keys[i]]['SL'], data[keys[i]]['MS'], data[keys[i]]['AI'], data[keys[i]]['BS'], data[keys[i]]['MG'], data[keys[i]]['GL'], data[keys[i]]['TT'], data[keys[i]]['TJ'], data[keys[i]]['GG'], data[keys[i]]['FO'], data[keys[i]]['SS'], data[keys[i]]['MR'], data[keys[i]]['CF'], data[keys[i]]['LS'], data[keys[i]]['BQ'], data[keys[i]]['BV'], data[keys[i]]['FM'], data[keys[i]]['GQ'], data[keys[i]]['SX'], data[keys[i]]['PM'], data[keys[i]]['NA'], data[keys[i]]['FK'], data[keys[i]]['SJ'], data[keys[i]]['SB'], data[keys[i]]['TG'], data[keys[i]]['PW'], data[keys[i]]['MF'], data[keys[i]]['PN'], data[keys[i]]['DM'], data[keys[i]]['NF'], data[keys[i]]['TK'], data[keys[i]]['WF'], data[keys[i]]['EH'], data[keys[i]]['SC'], data[keys[i]]['KI'], data[keys[i]]['TF'], data[keys[i]]['PR'], data[keys[i]]['VI'], data[keys[i]]['GU'], data[keys[i]]['AS'], data[keys[i]]['MP'], data[keys[i]]['TV'], data[keys[i]]['CK'], data[keys[i]]['SD'], data[keys[i]]['VA'], data[keys[i]]['GS'], data[keys[i]]['NR'], data[keys[i]]['TC'], data[keys[i]]['VG'], data[keys[i]]['KP'], data[keys[i]]['AQ'], data[keys[i]]['BT'], data[keys[i]]['YT'], data[keys[i]]['HM'], data[keys[i]]['TM'], data[keys[i]]['NU'], data[keys[i]]['IO'], data[keys[i]]['SR'], data[keys[i]]['MQ'], data[keys[i]]['LC'], data[keys[i]]['CC'], data[keys[i]]['CX'], data[keys[i]]['AX'], data[keys[i]]['TL'], data[keys[i]]['RW'], data[keys[i]]['TO'], data[keys[i]]['VC'], data[keys[i]]['BW'], data[keys[i]]['AW'], data[keys[i]]['CV'], data[keys[i]]['GY'], data[keys[i]]['WS'], data[keys[i]]['BI'], data[keys[i]]['LY'], data[keys[i]]['SZ'], data[keys[i]]['SY'], data[keys[i]]['NE'], data[keys[i]]['ME'], data[keys[i]]['SH'], data[keys[i]]['GW'], data[keys[i]]['VU'], data[keys[i]]['KN'], data[keys[i]]['CS'], data[keys[i]]['PF'], data[keys[i]]['DZ'], data[keys[i]]['BN'], data[keys[i]]['SM'], data[keys[i]]['ER'], data[keys[i]]['FJ'], data[keys[i]]['AG'], data[keys[i]]['GF'], data[keys[i]]['CG'], data[keys[i]]['HT'], data[keys[i]]['BZ'], data[keys[i]]['GP'], data[keys[i]]['UZ'], data[keys[i]]['BL'], data[keys[i]]['GD'], data[keys[i]]['KM'], data[keys[i]]['AD'], data[keys[i]]['PS'], data[keys[i]]['BB'], data[keys[i]]['CW'], data[keys[i]]['CI'], data[keys[i]]['SO'], data[keys[i]]['BJ'], data[keys[i]]['BM'], data[keys[i]]['MN'], data[keys[i]]['RE'], data[keys[i]]['CM'], data[keys[i]]['GN'], data[keys[i]]['LI'], data[keys[i]]['MC'], data[keys[i]]['NI'], data[keys[i]]['MH'], data[keys[i]]['HN'], data[keys[i]]['CU'], data[keys[i]]['IM'], data[keys[i]]['MM'], data[keys[i]]['BH'], data[keys[i]]['MK'], data[keys[i]]['ZW'], data[keys[i]]['LA'], data[keys[i]]['ZM'], data[keys[i]]['LR'], data[keys[i]]['AO'], data[keys[i]]['PY'], data[keys[i]]['ML'], data[keys[i]]['KG'], data[keys[i]]['MZ'], data[keys[i]]['BF'], data[keys[i]]['SN'], data[keys[i]]['JO'], data[keys[i]]['EC'], data[keys[i]]['AZ'], data[keys[i]]['TD'], data[keys[i]]['BY'], data[keys[i]]['SV'], data[keys[i]]['AM'], data[keys[i]]['MD'], data[keys[i]]['AL'], data[keys[i]]['MO'], data[keys[i]]['LT'], data[keys[i]]['LV'], data[keys[i]]['SI'], data[keys[i]]['UG'], data[keys[i]]['KZ'], data[keys[i]]['IS'], data[keys[i]]['MU'], data[keys[i]]['JM'], data[keys[i]]['NC'], data[keys[i]]['IQ'], data[keys[i]]['ST'], data[keys[i]]['GT'], data[keys[i]]['EE'], data[keys[i]]['DO'], data[keys[i]]['OM'], data[keys[i]]['CY'], data[keys[i]]['YE'], data[keys[i]]['BA'], data[keys[i]]['KH'], data[keys[i]]['DK'], data[keys[i]]['KW'], data[keys[i]]['HR'], data[keys[i]]['LB'], data[keys[i]]['NP'], data[keys[i]]['BO'], data[keys[i]]['PE'], data[keys[i]]['RS'], data[keys[i]]['LU'], data[keys[i]]['MT'], data[keys[i]]['CR'], data[keys[i]]['GE'], data[keys[i]]['PA'], data[keys[i]]['AF'], data[keys[i]]['UY'], data[keys[i]]['SK'], data[keys[i]]['TN'], data[keys[i]]['GM'], data[keys[i]]['PK'], data[keys[i]]['GH'], data[keys[i]]['NO'], data[keys[i]]['MA'], data[keys[i]]['QA'], data[keys[i]]['SA'], data[keys[i]]['CO'], data[keys[i]]['GR'], data[keys[i]]['ET'], data[keys[i]]['EG'], data[keys[i]]['BG'], data[keys[i]]['IR'], data[keys[i]]['FI'], data[keys[i]]['KR'], data[keys[i]]['KE'], data[keys[i]]['BD'], data[keys[i]]['HU'], data[keys[i]]['NG'], data[keys[i]]['VN'], data[keys[i]]['NZ'], data[keys[i]]['TW'], data[keys[i]]['TH'], data[keys[i]]['PT'], data[keys[i]]['VE'], data[keys[i]]['KY'], data[keys[i]]['AT'], data[keys[i]]['JP'], data[keys[i]]['ID'], data[keys[i]]['RO'], data[keys[i]]['MY'], data[keys[i]]['IL'], data[keys[i]]['HK'], data[keys[i]]['AE'], data[keys[i]]['CN'], data[keys[i]]['CZ'], data[keys[i]]['CH'], data[keys[i]]['PH'], data[keys[i]]['SE'], data[keys[i]]['ZA'], data[keys[i]]['ES'], data[keys[i]]['BR'], data[keys[i]]['IE'], data[keys[i]]['PL'], data[keys[i]]['AR'], data[keys[i]]['SG'], data[keys[i]]['RU'], data[keys[i]]['TR'], data[keys[i]]['IT'], data[keys[i]]['NL'], data[keys[i]]['MX'], data[keys[i]]['AU'], data[keys[i]]['GB'], data[keys[i]]['IN'], data[keys[i]]['BE'], data[keys[i]]['CA'], data[keys[i]]['DE'], data[keys[i]]['FR']]
        prod_wo_hits_in_us.append(lt)
        print 'product {} does not have product hits in US'.format(keys[i])

df = pd.DataFrame(all_data, columns=['product_id', 'US proportion to US', 'CL proportion to US', 'UA proportion to US', 'LK proportion to US', 'TZ proportion to US', 'JE proportion to US', 'PG proportion to US', 'CD proportion to US', 'GI proportion to US', 'GA proportion to US', 'MW proportion to US', 'MV proportion to US', 'XK proportion to US', 'DJ proportion to US', 'SL proportion to US', 'MS proportion to US', 'AI proportion to US', 'BS proportion to US', 'MG proportion to US', 'GL proportion to US', 'TT proportion to US', 'TJ proportion to US', 'GG proportion to US', 'FO proportion to US', 'SS proportion to US', 'MR proportion to US', 'CF proportion to US', 'LS proportion to US', 'BQ proportion to US', 'BV proportion to US', 'FM proportion to US', 'GQ proportion to US', 'SX proportion to US', 'PM proportion to US', 'NA proportion to US', 'FK proportion to US', 'SJ proportion to US', 'SB proportion to US', 'TG proportion to US', 'PW proportion to US', 'MF proportion to US', 'PN proportion to US', 'DM proportion to US', 'NF proportion to US', 'TK proportion to US', 'WF proportion to US', 'EH proportion to US', 'SC proportion to US', 'KI proportion to US', 'TF proportion to US', 'PR proportion to US', 'VI proportion to US', 'GU proportion to US', 'AS proportion to US', 'MP proportion to US', 'TV proportion to US', 'CK proportion to US', 'SD proportion to US', 'VA proportion to US', 'GS proportion to US', 'NR proportion to US', 'TC proportion to US', 'VG proportion to US', 'KP proportion to US', 'AQ proportion to US', 'BT proportion to US', 'YT proportion to US', 'HM proportion to US', 'TM proportion to US', 'NU proportion to US', 'IO proportion to US', 'SR proportion to US', 'MQ proportion to US', 'LC proportion to US', 'CC proportion to US', 'CX proportion to US', 'AX proportion to US', 'TL proportion to US', 'RW proportion to US', 'TO proportion to US', 'VC proportion to US', 'BW proportion to US', 'AW proportion to US', 'CV proportion to US', 'GY proportion to US', 'WS proportion to US', 'BI proportion to US', 'LY proportion to US', 'SZ proportion to US', 'SY proportion to US', 'NE proportion to US', 'ME proportion to US', 'SH proportion to US', 'GW proportion to US', 'VU proportion to US', 'KN proportion to US', 'CS proportion to US', 'PF proportion to US', 'DZ proportion to US', 'BN proportion to US', 'SM proportion to US', 'ER proportion to US', 'FJ proportion to US', 'AG proportion to US', 'GF proportion to US', 'CG proportion to US', 'HT proportion to US', 'BZ proportion to US', 'GP proportion to US', 'UZ proportion to US', 'BL proportion to US', 'GD proportion to US', 'KM proportion to US', 'AD proportion to US', 'PS proportion to US', 'BB proportion to US', 'CW proportion to US', 'CI proportion to US', 'SO proportion to US', 'BJ proportion to US', 'BM proportion to US', 'MN proportion to US', 'RE proportion to US', 'CM proportion to US', 'GN proportion to US', 'LI proportion to US', 'MC proportion to US', 'NI proportion to US', 'MH proportion to US', 'HN proportion to US', 'CU proportion to US', 'IM proportion to US', 'MM proportion to US', 'BH proportion to US', 'MK proportion to US', 'ZW proportion to US', 'LA proportion to US', 'ZM proportion to US', 'LR proportion to US', 'AO proportion to US', 'PY proportion to US', 'ML proportion to US', 'KG proportion to US', 'MZ proportion to US', 'BF proportion to US', 'SN proportion to US', 'JO proportion to US', 'EC proportion to US', 'AZ proportion to US', 'TD proportion to US', 'BY proportion to US', 'SV proportion to US', 'AM proportion to US', 'MD proportion to US', 'AL proportion to US', 'MO proportion to US', 'LT proportion to US', 'LV proportion to US', 'SI proportion to US', 'UG proportion to US', 'KZ proportion to US', 'IS proportion to US', 'MU proportion to US', 'JM proportion to US', 'NC proportion to US', 'IQ proportion to US', 'ST proportion to US', 'GT proportion to US', 'EE proportion to US', 'DO proportion to US', 'OM proportion to US', 'CY proportion to US', 'YE proportion to US', 'BA proportion to US', 'KH proportion to US', 'DK proportion to US', 'KW proportion to US', 'HR proportion to US', 'LB proportion to US', 'NP proportion to US', 'BO proportion to US', 'PE proportion to US', 'RS proportion to US', 'LU proportion to US', 'MT proportion to US', 'CR proportion to US', 'GE proportion to US', 'PA proportion to US', 'AF proportion to US', 'UY proportion to US', 'SK proportion to US', 'TN proportion to US', 'GM proportion to US', 'PK proportion to US', 'GH proportion to US', 'NO proportion to US', 'MA proportion to US', 'QA proportion to US', 'SA proportion to US', 'CO proportion to US', 'GR proportion to US', 'ET proportion to US', 'EG proportion to US', 'BG proportion to US', 'IR proportion to US', 'FI proportion to US', 'KR proportion to US', 'KE proportion to US', 'BD proportion to US', 'HU proportion to US', 'NG proportion to US', 'VN proportion to US', 'NZ proportion to US', 'TW proportion to US', 'TH proportion to US', 'PT proportion to US', 'VE proportion to US', 'KY proportion to US', 'AT proportion to US', 'JP proportion to US', 'ID proportion to US', 'RO proportion to US', 'MY proportion to US', 'IL proportion to US', 'HK proportion to US', 'AE proportion to US', 'CN proportion to US', 'CZ proportion to US', 'CH proportion to US', 'PH proportion to US', 'SE proportion to US', 'ZA proportion to US', 'ES proportion to US', 'BR proportion to US', 'IE proportion to US', 'PL proportion to US', 'AR proportion to US', 'SG proportion to US', 'RU proportion to US', 'TR proportion to US', 'IT proportion to US', 'NL proportion to US', 'MX proportion to US', 'AU proportion to US', 'GB proportion to US', 'IN proportion to US', 'BE proportion to US', 'CA proportion to US', 'DE proportion to US', 'FR proportion to US'])
indexed_df = df.set_index(df['product_id'])
del indexed_df['product_id']
del indexed_df['US proportion to US']
pp_df = indexed_df[(indexed_df['CL proportion to US']>0.5) | (indexed_df['UA proportion to US']>0.5) | (indexed_df['LK proportion to US']>0.5) | (indexed_df['TZ proportion to US']>0.5) | (indexed_df['JE proportion to US']>0.5) | (indexed_df['PG proportion to US']>0.5) | (indexed_df['CD proportion to US']>0.5) | (indexed_df['GI proportion to US']>0.5) | (indexed_df['GA proportion to US']>0.5) | (indexed_df['MW proportion to US']>0.5) | (indexed_df['MV proportion to US']>0.5) | (indexed_df['XK proportion to US']>0.5) | (indexed_df['DJ proportion to US']>0.5) | (indexed_df['SL proportion to US']>0.5) | (indexed_df['MS proportion to US']>0.5) | (indexed_df['AI proportion to US']>0.5) | (indexed_df['BS proportion to US']>0.5) | (indexed_df['MG proportion to US']>0.5) | (indexed_df['GL proportion to US']>0.5) | (indexed_df['TT proportion to US']>0.5) | (indexed_df['TJ proportion to US']>0.5) | (indexed_df['GG proportion to US']>0.5) | (indexed_df['FO proportion to US']>0.5) | (indexed_df['SS proportion to US']>0.5) | (indexed_df['MR proportion to US']>0.5) | (indexed_df['CF proportion to US']>0.5) | (indexed_df['LS proportion to US']>0.5) | (indexed_df['BQ proportion to US']>0.5) | (indexed_df['BV proportion to US']>0.5) | (indexed_df['FM proportion to US']>0.5) | (indexed_df['GQ proportion to US']>0.5) | (indexed_df['SX proportion to US']>0.5) | (indexed_df['PM proportion to US']>0.5) | (indexed_df['NA proportion to US']>0.5) | (indexed_df['FK proportion to US']>0.5) | (indexed_df['SJ proportion to US']>0.5) | (indexed_df['SB proportion to US']>0.5) | (indexed_df['TG proportion to US']>0.5) | (indexed_df['PW proportion to US']>0.5) | (indexed_df['MF proportion to US']>0.5) | (indexed_df['PN proportion to US']>0.5) | (indexed_df['DM proportion to US']>0.5) | (indexed_df['NF proportion to US']>0.5) | (indexed_df['TK proportion to US']>0.5) | (indexed_df['WF proportion to US']>0.5) | (indexed_df['EH proportion to US']>0.5) | (indexed_df['SC proportion to US']>0.5) | (indexed_df['KI proportion to US']>0.5) | (indexed_df['TF proportion to US']>0.5) | (indexed_df['PR proportion to US']>0.5) | (indexed_df['VI proportion to US']>0.5) | (indexed_df['GU proportion to US']>0.5) | (indexed_df['AS proportion to US']>0.5) | (indexed_df['MP proportion to US']>0.5) | (indexed_df['TV proportion to US']>0.5) | (indexed_df['CK proportion to US']>0.5) | (indexed_df['SD proportion to US']>0.5) | (indexed_df['VA proportion to US']>0.5) | (indexed_df['GS proportion to US']>0.5) | (indexed_df['NR proportion to US']>0.5) | (indexed_df['TC proportion to US']>0.5) | (indexed_df['VG proportion to US']>0.5) | (indexed_df['KP proportion to US']>0.5) | (indexed_df['AQ proportion to US']>0.5) | (indexed_df['BT proportion to US']>0.5) | (indexed_df['YT proportion to US']>0.5) | (indexed_df['HM proportion to US']>0.5) | (indexed_df['TM proportion to US']>0.5) | (indexed_df['NU proportion to US']>0.5) | (indexed_df['IO proportion to US']>0.5) | (indexed_df['SR proportion to US']>0.5) | (indexed_df['MQ proportion to US']>0.5) | (indexed_df['LC proportion to US']>0.5) | (indexed_df['CC proportion to US']>0.5) | (indexed_df['CX proportion to US']>0.5) | (indexed_df['AX proportion to US']>0.5) | (indexed_df['TL proportion to US']>0.5) | (indexed_df['RW proportion to US']>0.5) | (indexed_df['TO proportion to US']>0.5) | (indexed_df['VC proportion to US']>0.5) | (indexed_df['BW proportion to US']>0.5) | (indexed_df['AW proportion to US']>0.5) | (indexed_df['CV proportion to US']>0.5) | (indexed_df['GY proportion to US']>0.5) | (indexed_df['WS proportion to US']>0.5) | (indexed_df['BI proportion to US']>0.5) | (indexed_df['LY proportion to US']>0.5) | (indexed_df['SZ proportion to US']>0.5) | (indexed_df['SY proportion to US']>0.5) | (indexed_df['NE proportion to US']>0.5) | (indexed_df['ME proportion to US']>0.5) | (indexed_df['SH proportion to US']>0.5) | (indexed_df['GW proportion to US']>0.5) | (indexed_df['VU proportion to US']>0.5) | (indexed_df['KN proportion to US']>0.5) | (indexed_df['CS proportion to US']>0.5) | (indexed_df['PF proportion to US']>0.5) | (indexed_df['DZ proportion to US']>0.5) | (indexed_df['BN proportion to US']>0.5) | (indexed_df['SM proportion to US']>0.5) | (indexed_df['ER proportion to US']>0.5) | (indexed_df['FJ proportion to US']>0.5) | (indexed_df['AG proportion to US']>0.5) | (indexed_df['GF proportion to US']>0.5) | (indexed_df['CG proportion to US']>0.5) | (indexed_df['HT proportion to US']>0.5) | (indexed_df['BZ proportion to US']>0.5) | (indexed_df['GP proportion to US']>0.5) | (indexed_df['UZ proportion to US']>0.5) | (indexed_df['BL proportion to US']>0.5) | (indexed_df['GD proportion to US']>0.5) | (indexed_df['KM proportion to US']>0.5) | (indexed_df['AD proportion to US']>0.5) | (indexed_df['PS proportion to US']>0.5) | (indexed_df['BB proportion to US']>0.5) | (indexed_df['CW proportion to US']>0.5) | (indexed_df['CI proportion to US']>0.5) | (indexed_df['SO proportion to US']>0.5) | (indexed_df['BJ proportion to US']>0.5) | (indexed_df['BM proportion to US']>0.5) | (indexed_df['MN proportion to US']>0.5) | (indexed_df['RE proportion to US']>0.5) | (indexed_df['CM proportion to US']>0.5) | (indexed_df['GN proportion to US']>0.5) | (indexed_df['LI proportion to US']>0.5) | (indexed_df['MC proportion to US']>0.5) | (indexed_df['NI proportion to US']>0.5) | (indexed_df['MH proportion to US']>0.5) | (indexed_df['HN proportion to US']>0.5) | (indexed_df['CU proportion to US']>0.5) | (indexed_df['IM proportion to US']>0.5) | (indexed_df['MM proportion to US']>0.5) | (indexed_df['BH proportion to US']>0.5) | (indexed_df['MK proportion to US']>0.5) | (indexed_df['ZW proportion to US']>0.5) | (indexed_df['LA proportion to US']>0.5) | (indexed_df['ZM proportion to US']>0.5) | (indexed_df['LR proportion to US']>0.5) | (indexed_df['AO proportion to US']>0.5) | (indexed_df['PY proportion to US']>0.5) | (indexed_df['ML proportion to US']>0.5) | (indexed_df['KG proportion to US']>0.5) | (indexed_df['MZ proportion to US']>0.5) | (indexed_df['BF proportion to US']>0.5) | (indexed_df['SN proportion to US']>0.5) | (indexed_df['JO proportion to US']>0.5) | (indexed_df['EC proportion to US']>0.5) | (indexed_df['AZ proportion to US']>0.5) | (indexed_df['TD proportion to US']>0.5) | (indexed_df['BY proportion to US']>0.5) | (indexed_df['SV proportion to US']>0.5) | (indexed_df['AM proportion to US']>0.5) | (indexed_df['MD proportion to US']>0.5) | (indexed_df['AL proportion to US']>0.5) | (indexed_df['MO proportion to US']>0.5) | (indexed_df['LT proportion to US']>0.5) | (indexed_df['LV proportion to US']>0.5) | (indexed_df['SI proportion to US']>0.5) | (indexed_df['UG proportion to US']>0.5) | (indexed_df['KZ proportion to US']>0.5) | (indexed_df['IS proportion to US']>0.5) | (indexed_df['MU proportion to US']>0.5) | (indexed_df['JM proportion to US']>0.5) | (indexed_df['NC proportion to US']>0.5) | (indexed_df['IQ proportion to US']>0.5) | (indexed_df['ST proportion to US']>0.5) | (indexed_df['GT proportion to US']>0.5) | (indexed_df['EE proportion to US']>0.5) | (indexed_df['DO proportion to US']>0.5) | (indexed_df['OM proportion to US']>0.5) | (indexed_df['CY proportion to US']>0.5) | (indexed_df['YE proportion to US']>0.5) | (indexed_df['BA proportion to US']>0.5) | (indexed_df['KH proportion to US']>0.5) | (indexed_df['DK proportion to US']>0.5) | (indexed_df['KW proportion to US']>0.5) | (indexed_df['HR proportion to US']>0.5) | (indexed_df['LB proportion to US']>0.5) | (indexed_df['NP proportion to US']>0.5) | (indexed_df['BO proportion to US']>0.5) | (indexed_df['PE proportion to US']>0.5) | (indexed_df['RS proportion to US']>0.5) | (indexed_df['LU proportion to US']>0.5) | (indexed_df['MT proportion to US']>0.5) | (indexed_df['CR proportion to US']>0.5) | (indexed_df['GE proportion to US']>0.5) | (indexed_df['PA proportion to US']>0.5) | (indexed_df['AF proportion to US']>0.5) | (indexed_df['UY proportion to US']>0.5) | (indexed_df['SK proportion to US']>0.5) | (indexed_df['TN proportion to US']>0.5) | (indexed_df['GM proportion to US']>0.5) | (indexed_df['PK proportion to US']>0.5) | (indexed_df['GH proportion to US']>0.5) | (indexed_df['NO proportion to US']>0.5) | (indexed_df['MA proportion to US']>0.5) | (indexed_df['QA proportion to US']>0.5) | (indexed_df['SA proportion to US']>0.5) | (indexed_df['CO proportion to US']>0.5) | (indexed_df['GR proportion to US']>0.5) | (indexed_df['ET proportion to US']>0.5) | (indexed_df['EG proportion to US']>0.5) | (indexed_df['BG proportion to US']>0.5) | (indexed_df['IR proportion to US']>0.5) | (indexed_df['FI proportion to US']>0.5) | (indexed_df['KR proportion to US']>0.5) | (indexed_df['KE proportion to US']>0.5) | (indexed_df['BD proportion to US']>0.5) | (indexed_df['HU proportion to US']>0.5) | (indexed_df['NG proportion to US']>0.5) | (indexed_df['VN proportion to US']>0.5) | (indexed_df['NZ proportion to US']>0.5) | (indexed_df['TW proportion to US']>0.5) | (indexed_df['TH proportion to US']>0.5) | (indexed_df['PT proportion to US']>0.5) | (indexed_df['VE proportion to US']>0.5) | (indexed_df['KY proportion to US']>0.5) | (indexed_df['AT proportion to US']>0.5) | (indexed_df['JP proportion to US']>0.5) | (indexed_df['ID proportion to US']>0.5) | (indexed_df['RO proportion to US']>0.5) | (indexed_df['MY proportion to US']>0.5) | (indexed_df['IL proportion to US']>0.5) | (indexed_df['HK proportion to US']>0.5) | (indexed_df['AE proportion to US']>0.5) | (indexed_df['CN proportion to US']>0.5) | (indexed_df['CZ proportion to US']>0.5) | (indexed_df['CH proportion to US']>0.5) | (indexed_df['PH proportion to US']>0.5) | (indexed_df['SE proportion to US']>0.5) | (indexed_df['ZA proportion to US']>0.5) | (indexed_df['ES proportion to US']>0.5) | (indexed_df['BR proportion to US']>0.5) | (indexed_df['IE proportion to US']>0.5) | (indexed_df['PL proportion to US']>0.5) | (indexed_df['AR proportion to US']>0.5) | (indexed_df['SG proportion to US']>0.5) | (indexed_df['RU proportion to US']>0.5) | (indexed_df['TR proportion to US']>0.5) | (indexed_df['IT proportion to US']>0.5) | (indexed_df['NL proportion to US']>0.5) | (indexed_df['MX proportion to US']>0.5) | (indexed_df['AU proportion to US']>0.5) | (indexed_df['GB proportion to US']>0.5) | (indexed_df['IN proportion to US']>0.5) | (indexed_df['BE proportion to US']>0.5) | (indexed_df['CA proportion to US']>0.5) | (indexed_df['DE proportion to US']>0.5) | (indexed_df['FR proportion to US']>0.5)]
# filename = '/Users/gracezhou/Documents/DataOps/potential_anomalies_products.csv'
# pp_df.to_csv(filename, sep=',')